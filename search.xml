<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[一文理解Python的赋值以及浅拷贝和深拷贝]]></title>
    <url>%2F2019%2F06%2F04%2FPython%2F%E4%B8%80%E6%96%87%E7%90%86%E8%A7%A3Python%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D%2F</url>
    <content type="text"><![CDATA[&#160; &#160; &#160; &#160;Python作为一门高级语言，与C/C++还是有很大的不同。关于赋值、切片、浅拷贝和深拷贝这一块，其实很多人对其不是很了解的，这就很容易在某些代码中出现意想不到的结果，同时也会很难找到原因。本文将讲述这几类情况的区别以及使用，尽可能通俗易懂，不会涉及到底层的实现原理。 &#160; &#160; 本文所有代码的执行环境如下： 操作系统：Window10 Python版本：Python 3.7.0 执行方式：CMD窗口+Python解释器的命令交互模式 赋值、切片、拷贝 &#160; &#160; &#160;本文使用is运算符来判断对象间的唯一身份标识，也就是id是否相同，is也叫同一性运算符 赋值赋值就是我们通过=把一个变量的值赋给另一变量，相当于引用，这里的赋值又可以分为几类 不可变对象的赋值（在缓存范围内）为了增加程序的运行效率，Python3的解析器中实现了整型数字和字符串缓存的机制， 整型数字的缓存范围为[-5, 256]，即变量值相等且在[-5, 20]范围内的所有变量都是同一个对象（这个是有争议的，有文章说是[-5, 无穷大]，但我实测是[-5, 256]） 字符串默认缓存长度4096，即变量值相等且长度在4096以内的所有字符串变量是同一个对象，（这个是有争议的，很多文章说是缓存20位，但我实测是长度4096） 1234567891011# 字符串赋值str_a = str_b = 'hello' # 相当于 str_a = 'hello' 和 str_b = str_a 这两条语句str_c = 'hello'print(str_b is str_a) # 输出: Trueprint(str_c is str_a) # 输出：True，这里输出True就是因为缓存机制，str_c和str_a的值相等，都是'hello'，且长度在20以内# 整型赋值int_a = int_b = 100 # 相当于 int_a = 100 和 int_b = int_a 这两条语句int_c = 10 * 10print(int_b is int_a) # 输出Trueprint(int_c is int_a) # 输出True，这里输出True就是缓存机制，因为int_c和int_a的值相等，都为100，且在[-5, 256]范围内 不可变对象的赋值（不在缓存范围内）1234567891011# 字符串赋值str_a = str_b = 'a' * 4097 # 相当于 str_a = 'a' * 4097 和 str_b = str_a 这两条语句str_c = 'a' * 4097print(str_b is str_a) # 输出: Trueprint(str_c is str_a) # 输出：False，这里输出False是因为虽然str_c和str_a的值相等，但长度在为4097，超过了缓存最大长度4096# 整型赋值int_a = int_b = 1000 # 相当于 int_a = 100 和 int_b = int_a 这两条语句int_c = 10 * 10 * 10print(int_b is int_a) # 输出Trueprint(int_c is int_a) # 输出False，这里输出False是因为虽然int_c和int_a的值相等，都为1000，但超出了缓存]范围[-5, 256] 可变对象的赋值这种情况相当于完全引用，“比浅拷贝还要浅拷贝”，这里举个例，假定list_a为列表，把list_a赋值给list_b，只要不是重新赋值list_a或list_b（list_a=xxx或list_b=yyy）操作，无论是通过list_a还是通过list_b来操作列表（增、删、改…），另一个对象也会随之改变（即list_a和list_b在没有重新执行赋值操作时，将一直是同一个对象） 123456list_a = list_b = [1, 2, 3] # 相当于 list_a = [1, 2, 3] 和 list_b = list_a 这两条语句list_c = [1, 2, 3]print(list_b is list_a) # 输出True，修改list_a会影响list_b，反之亦然print(list_c is list_a) # 输出False，所以修改list_a不会影响到list_c，反之亦然# 说明，这里所说的“比浅拷贝还浅拷贝”是针对浅拷贝而说的，也可以说完全没拷贝，只是引用# 浅拷贝中对本身的修改不会影响另一个（对可变子元素本身的操作才会影响），而赋值无论哪种情况的修改都会影响另一个，（这里的赋值和浅拷贝是针对可变对象来说的） 切片切片就是从某个对象中抽取部分的操作，切片操作得到的对象和原对象是不同的对象，但其子元素有可能是同一对象，这里分为几种情况说明，切片相当于浅拷贝 对是不可变对象的子元素的修改或增删操作不会影响另一对象123456789list_a = [1, 2, 3, 4]list_b = list_a[:] # 完全切片print(list_b is list_a) # 输出False，list_a和list_b是不同的对象list_a.append(5) # 对对象list_a进行追加元素操作# list_a[0] = 11 # 对对象list_a进行修改子元素操作# del list_a[-1] # 对对象list_a进行删除子元素操作print(list_a) # 输出[1, 2, 3, 4, 5]print(list_b) # 输出[1, 2, 3, 4]print(list_a is list_b) # 输出False，不是同一个对象 对是可变对象的子元素的操作会影响另一对象1234567891011121314151617181920list_a = [1, 2, [3], 4] # 和上面不同在于list_a[2]是一个可变对象list_b = list_a[:] # 完全切片print(list_b is list_a) # 输出False，list_a和list_b是不同的对象list_a[2].append(44) # 对可变子元素进行追加子元素操作，注意是对子元素本身进行追加操作# list_a[2][0] = 33 # 对可变子元素进行修改子元素操作，注意是对子元素本身的子元素进行修改操作，而不是修改list_a的子元素# del list_a[2][-1] # 对可变子元素进行删除子元素操作，注意是对子元素本身的子元素进行删除操作，而不是删除list_a的子元素print(list_) # 输出[1, 2, [3, 44], 4]print(list_b) # 输出[1, 2, [3, 44], 4]print(list_b is list_a) # 输出False，list_a和list_b是不同的对象print(list_a[2] is list_b[2]) # 输出True，在切片操作中，可变子元素是相当于赋值操作的，即list_a[2]和list_b[2]是同一个对象# 说明：这种情况是不区分完全切片和不完全切片的，只要切片得到的子元素是可变对象的，都满足这种情况,以下代码就是不完全切片的例子，和完全切片的情况一样的list_c = list_a[:3] # 不完全切片，但切片得到的list_c[2]是一个可变对象print(list_c is list_a) # 输出False，list_a和list_c是不同的对象list_a[2][0] = 33 # 修改可变子元素的子元素，注意是修改子元素本身的子元素，而不是修改list_a的子元素print(list_a) # 输出[1, 2, [33, 44], 4]print(list_c) # 输出[1, 2, [33, 44], 4]print(list_c is list_a) # 输出False，list_a和list_c是不同的对象print(list_a[2] is list_c[2]) # 输出True，在切片操作中，可变子元素是相当于赋值操作的，即list_a[2]和list_c[2]是同一个对象 拷贝相对于上面的赋值和切片，这里所说的拷贝的是通过copy模块进行拷贝操作 浅拷贝浅拷贝使用copy.copy(source)方法实现（某些对象本身会提供copy方法，如list.copy），拷贝出来的对象和原对象有可能是同一对象，如果拷贝的对象是可变对象，其子元素有可能是同一对象 对不可变对象进行浅拷贝，相当于深拷贝，类似于赋值操作，请参考上面的赋值说明，与赋值不同的是，这里拷贝得到的的对象和原对象是同一对象 12345678import copya = 'hello'b = copy.copy(a)print(b is a) # 输出True，和赋值一样c = 'a' * 4097d = copy.copy(c)print(d is c) # 输出True，和赋值不一样，已经超过缓存范围，但还是一样，这种情况可以类比于不设缓存范围（肯定缓存）的赋值操作 对可变对象进行浅拷贝，相当于完全切片，得到的对象和原对象是不同的对象，但其子元素有可能是同一对象 1234567891011121314151617import copya = [1, [2, [3, [4]]]]b = copy.copy(a)print(b is a) # 输出False，浅拷贝可变对象得到的对象和原对象是不同的对象print(b[0] is a[0]) # True，浅拷贝可变对象得到的对象的不可变子元素是同一对象，这和深拷贝是一样的print(b[1] is a[1]) # True，浅拷贝可变对象得到的对象的可变子元素也是同一对象，这和深拷贝是不一样的# 下面两个和上面两个是一样的情况，一一对应，只不过层级更深而已print(b[1][0] is a[1][0]) # Trueprint(b[1][1] is a[1][1]) # Trueb[0] = 111 # 对b[0]直接修改b.append(3434) # 对b进行追加操作print(a, b) # 这里a和b不一样了b[1][0] = 22 # 对子元素b[1][0]直接修改b[1].append(5) # 对子元素b[1]进行追加操作print(b[1], a[1]) # 这里的b[1]和a[1]还是保持一样的 深拷贝深拷贝使用copy.deepcopy(source)方法实现，拷贝出来的对象和原对象有可能是同一对象，如果拷贝的对象是可变对象，其子元素也有可能是同一对象，但总的来说，这两个对象完全没关系（无论是本身还是其子对象都完全没有关联），操作一个不会影响到另一个 不可变对象的深拷贝 1234import copya = 'a' * 10000b = copy.deepcopy(a)print(b is a) # 输出True，深拷贝不可变对象得到的对象和原对象是同一对象 可变对象的深拷贝 123456789import copyc = [1, [2, [3, [4]]]]d = copy.deepcopy(c)print(d is c) # 输出False，深拷贝可变对象得到的对象和原对象是不同的对象print(d[0] is c[0]) # 输出True，深拷贝可变对象得到的对象的不可变子元素是同一对象print(d[1] is c[1]) # 输出False，深拷贝可变对象得到的对象的可变子元素是不同的对象# 下面两个和上面两个是一样的情况，一一对应，只不过层级更深而已print(d[1][0] is c[1][0]) # 输出Trueprint(d[1][1] is c[1][1]) # 输出False 总结 赋值不可变对象要看是否有缓存机制来决定是否是同一对象 赋值可变对象相当于引用，完全不拷贝 切片相当于浅拷贝 对不可变对象进行浅拷贝，相当于深拷贝 对可变对象进行浅拷贝，直接修改一个不会不会影响另一个，但对其可变子元素的修改会影响另一个 深拷贝得到的对象和原对象互不相干，修改一个不会影响另一个，这里指任何修改]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo+Github一步步搭建属于自己的博客]]></title>
    <url>%2F2019%2F06%2F01%2FHexo%2F%E4%BD%BF%E7%94%A8Hexo%2BGithub%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[&#160; &#160; &#160; &#160;本文将使用Hexo+Github一步步搭建属于自己的博客，不多说，先上图 搭建步骤 注意 本文中所有命令或配置中以#开头的表示注释，仅仅用于说明 12# 注释，仅仅用于说明echo "hello" # 注释，仅仅用于说明，#号开始的属于注释，不属于命令 安装Node.js这里不对Node.js的安装做讲解，Node.js官网下载安装即可（https://nodejs.org/zh-cn/） 安装配置好Node.js后可以通过以下命令查看node和npm的版本 12node -v # 说明：由于我电脑的node不是新装的，所以是v8.12.0版本npm -v # 说明：我这里是6.4.1版本的npm 安装Git这里不对Git的安装做讲解，可以参考https://git-scm.com/book/zh/v2/起步-安装-Git 安装好后，通过以下命令可以查看git的版本 1git --version # 说明：我这里是git version 2.19.1.windows.1 创建Github仓库 打开github并登录（https://github.com/） 新建仓库 选中Repositories栏，然后点击右侧的New按钮创建 设置仓库名字 仓库名必须严格遵守格式：用户名.github.io，不要随意起名，后续会有麻烦，这里vimior是我的用户名） 记得选中Public和勾选Initialize this repository with a README 查看Github Pages 选中刚刚创建的仓库的Settings栏，找到Github Pages的设置项 此时Github Pages会显示如下，表明当前仓库可以作为Github Pages 安装Hexo环境 安装Hexo 12npm install hexo -g # 说明：这里-g参数是为了把hexo安装到全局hexo -v # 说明：查看hexo是否安装成功，获取其版本信息 新建一个工程目录（这里是vimior_blog），然后进入这个目录 初始化Hexo 1hexo init # 说明：此命令会在当前文件夹下生成一个hexo工程 生成静态页面 1hexo generate # 可以简写成 hexo g 启动本地服务器，启动后可以通过http://localhost:4000来访问 1hexo server # 可以简写成 hexo s 新建博文 通过hexo new &lt;文章名&gt;来新建或者直接在工程目录下的source/_post目录下创建一个md文件即可，然后重新生成静态页面并启动服务器即可 12hexo new "文章名" # 此命令会在工程目录下的source/_post目录下生成一个&lt;文章名&gt;.md的文件hexo g &amp;&amp; hexo s # 此命令重新生成静态文件并启动服务器，此时即可通过浏览器访问到我们刚创建的博文了，修改该md文件即可修改博文内容 博文格式如下 12345678910---title: 博文的标题---博文内容# 注意：如果需要给博文指定类别，可以在头部使用categories: "xxx类别名"，参考如下---title: 博文的标题categories: "测试类别"--- 配置Hexo注意：这里我们先统一把需要的包安装好，具体配置会在配置里面用注释说明 安装hexo-theme-next主题（配置使用在后面统一说明） 12# 说明：以下命令会从https://github.com/theme-next/hexo-theme-next下载内容到当前目录下的themes/next里面git clone https://github.com/theme-next/hexo-theme-next themes/next 安装hexo-helper-live2d（用于生成Live2D看板娘） 12345npm install hexo-helper-live2d --save# 下面的命令是安装live2d的模型，这里选择live2d-widget-model-haruto# 参考https://github.com/xiazeyu/live2d-widget-models选择自己需要的# 如果选择别的模型，在配置_config.yml文件里的live2d-&gt;model-&gt;use的值也要对应修改npm install live2d-widget-model-haruto --save 安装hexo-symbols-count-time（用于字数统计和计算阅读时间） 1npm install hexo-symbols-count-time --save 安装hexo-generator-sitemap（用于生成站点地图） 1npm install hexo-generator-sitemap --save 安装hexo-generator-feed（用于生成RSS订阅） 1npm install hexo-generator-feed --save 安装hexo-generator-searchdb（用于生成搜索数据库） 1npm install hexo-generator-searchdb --save 安装hexo-deployer-git（用于推送到Github） 1npm install hexo-deployer-git --save 新建categories页（分类页面） 12345678hexo new page categories # 会在source目录下生成categories目录# 修改source/categories/index.md文件如下---title: categoriesdate: 2019-06-01 23:34:54type: "categories"comments: false--- 新建tags页（标签页面） 12345678hexo new page tags # 会在source目录下生成tags目录# 修改source/categories/index.md文件如下---title: 标签date: 2019-06-01 14:21:23type: "tags"comments: false--- 新建about页 12345678hexo new page about # 会在source目录下生成about目录# 修改source/categories/index.md文件如下---title: 我date: 2019-06-01 23:35:51comments: false---&lt;h3 style="text-align: center;font-size: 18px;"&gt;就算有一天我一无所有，也不缺从头再来的勇气！&lt;/h3&gt; 修改工程的配置修改_config.yml文件） 详细配置参考https://hexo.io/zh-cn/docs/configuration 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697# 以下是在原有配置项修改的，大家仅需修改对应的项# 博客站点标题title: 落# 博客站点子标题subtitle: 你若安好，便是晴天！# 描述description: 代码千万行，注释第一行。&lt;/br&gt;编程不规范，同事两行泪。# 作者author: Vimor# 语言language: zh-CN# 时区timezone: Asia/Shanghai# URL，这里的url值大家修改成自己的Github Page地址url: https://vimior.github.io# 主题配置，这里把默认的landscape注释掉，使用我们安装的next主题# theme: landscapetheme: next # 使用hexo-theme-next主题# 关联Github Pages，此处的repo值请修改为自己的Github Pages仓库路径# 这里是执行hexo deploy命令时才需要用到的配置，不影响本地调试运行的使用deploy: type: git repo: git@github.com:vimior/vimior.github.io.git branch: master############上面的配置是在原有配置基础上修改的################################完美的分割线：#########################################下面的配置是新增的######################### Live2D：看板娘的配置# 详细配置参考：https://github.com/EYHN/hexo-helper-live2d# live2d-&gt;model-&gt;use这项要根据自己之前安装Live2D支持的时候安装那个model来配置live2d: enable: true scriptFrom: local # 默认 pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径) pluginJsPath: lib/ # 脚本文件相对与插件根目录路径 pluginModelPath: assets/ # 模型文件相对与插件根目录路径 # scriptFrom: jsdelivr # jsdelivr CDN # scriptFrom: unpkg # unpkg CDN # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中 debug: false # 调试, 是否在控制台输出日志 log: false model: use: live2d-widget-model-haruto # npm-module package name # use: hijiki # 博客根目录/live2d_models/ 下的目录名 # use: ./wives/hijiki # 相对于博客根目录的路径 # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-hijiki@1.0.5/assets/hijiki.model.json # 你的自定义 url scale: 1 hHeadPos: 0.5 vHeadPos: 0.618 display: superSample: 2 width: 125 height: 125 position: left hOffset: 30 vOffset: 20 mobile: show: true scale: 0.05 react: opacityDefault: 1 opacityOnHover: 0.2# symbols_count_time配置：用于计算字数，阅读时间symbols_count_time: symbols: true time: true total_symbols: true total_time: true exclude_codeblock: false# 版权协议的配置creative_commons: by-nc-sa# 订阅的配置feed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: ' '# 搜索的配置search: path: search.xml field: post format: html limit: 10000 修改hexo-theme-next主题的配置（修改themes/next/_config.yml__文件） 详细配置参考http://theme-next.iissnan.com/theme-settings.html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116# RSS配置rss: /atom.xml# 页脚配置footer: since: 2019 icon: name: heart animated: true color: "#D0104C"# 菜单栏配置1：把不需要的菜单的菜单注释掉就好# 这里的要显示的菜单包括（首页、关于、标签、分类、归档、站点地图、搜索）menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive # schedule: /schedule/ || calendar sitemap: /sitemap.xml || sitemap # commonweal: /404/ || heartbeatmenu_settings: icons: true badges: true# 主题风格：这里选用Gemini# scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini# 社交配置：这里把需要显示的配置好，不需要的注释就好# 这里仅仅显示Github和E-Mail，记得把地址修改为自己的social: GitHub: https://github.com/vimior || github E-Mail: mailto:vinman.cub@gmail.com || envelope #Weibo: https://weibo.com/yourname || weibo #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skypesocial_icons: enable: true # 是否显示图标 icons_only: true # 是否只显示图标 transition: false# 用户头像配置avatar: # In theme directory (source/images): /images/avatar.gif # In site directory (source/uploads): /uploads/avatar.gif # You can also use other linking images. url: /images/avatar.png # 注意：需要把avatar.png放在themes/next/source/images里面 # If true, the avatar would be dispalyed in circle. rounded: true # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar. opacity: 1 # If true, the avatar would be rotated with the cursor. rotated: false# 回到顶部的配置back2top: enable: true sidebar: true scrollpercent: true# 博文的元数据配置，即博文标题下面显示的内容（如发表时间、所属分类等等）post_meta： item_text: true created_at: true updated_at: enable: true another_day: false categories: true# 字数统计配置symbols_count_time: separated_meta: true item_text_post: true item_text_total: false awl: 2 wpm: 300# brand的背景颜色配置android_chrome_color: "#fff"# 代码高亮的主题配置highlight_theme: night eighties# 卜算子配置：统计阅读次数等busuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye# 本地搜索配置local_search: enable: true # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: auto # Show top n results per article, show all results by setting to -1 top_n_per_article: 1 # Unescape html strings to the readable one. unescape: false# 更多配置请参阅http://theme-next.iissnan.com/theme-settings.html# 如评论的配置可以通过配置valine（使用leancloud） 推送到Github Pages注意： 推送前先本地运行，通过浏览器访问没问题再行推送 初次使用git需要设置user name和email 12git config --global user.name "your name"git config --global user.email "your email" （如果未曾添加过ssh-agent）需要添加ssh-key到github的ssh-agent 12345# 1. 生成ssh密钥ssh-keygen -t rsa -C "your email" # 生成路径在%USERPROFILE%/.ssh目录# 2. 把%USERPROFILE%/.ssh/id_rsa的内容拷贝# 3. 粘贴到github 生成静态文件 1hexo generate # 可以简写为 hexo d 推送到github pages 12hexo deploy # 可以简写为 hexo d# hexo deploy -g # 可以简写hexo d -g，等效于hexo g &amp;&amp; hexo d 总结&#160; &#160; &#160; 此时，我们已经搭建好一个属于自己的博客了，如果需要部署到其他仓库，只需要修改deploy配置即可，详情请查阅https://hexo.io/zh-cn/docs/deployment &#160; &#160; &#160; Hexo的功能很强大，用&#160;Hexo+Github搭建一个属于自己的博客，不需要我们写代码，只需要通过修改配置即可搭建一个属于自己的酷炫博客。另外，我们平时可以通过在source/_post目录下用Markdown来写自己的笔记、博文，然后重新推送即可在自己的线上博客上看到。 &#160; &#160; &#160; 这是我博客里的第一篇博文，由于本人学识有限，难免有错漏，敬请谅解，欢迎指出！ &#160; &#160; &#160; 大家六一快乐！！！！！！！！！！！！！]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
</search>
