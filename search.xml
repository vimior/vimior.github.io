<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用Hexo+Github一步步搭建属于自己的博客]]></title>
    <url>%2FHexo%2FHexo%2F%E4%BD%BF%E7%94%A8Hexo%2BGithub%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[&#160; &#160; &#160; &#160;本文将使用Hexo+Github一步步搭建属于自己的博客，效果如下 搭建步骤 安装Node.js这里不对Node.js的安装做讲解，Node.js官网下载安装即可（https://nodejs.org/zh-cn/） 安装配置好Node.js后可以通过以下命令查看node和npm的版本 12node -v # 由于我电脑的node不是新装的，所以是v8.12.0版本npm -v # 我这里是6.4.1版本的npm 安装Git这里不对Git的安装做讲解，可以参考https://git-scm.com/book/zh/v2/起步-安装-Git 安装好后，通过以下命令可以查看git的版本 1git --version # 我这里是git version 2.19.1.windows.1 创建Github仓库 打开github并登录（https://github.com/） 新建仓库 选中Repositories栏，然后点击右侧的New按钮创建 设置仓库名字（ 仓库名必须严格遵守格式：用户名.github.io，不要随意起名，后续会有麻烦，这里vimior是我的用户名） 记得选中Public和勾选Initialize this repository with a README 查看Github Pages 选中刚刚创建的仓库的Settings栏，找到Github Pages的设置项 此时Github Pages会显示如下，表明当前仓库可以作为Github Pages 安装Hexo环境 安装Hexo 12npm install hexo -g # 这里-g参数是为了把hexo安装到全局hexo -v # 查看hexo是否安装成功，获取其版本信息 新建一个工程目录（这里是vimior_blog），然后进入这个目录 初始化Hexo 1hexo init # 生成静态页面 1hexo generate # 可以简写成 hexo g 启动本地服务器，启动后可以通过http://localhost:4000来访问 1hexo server # 可以简写成 hexo s 新建博文 通过hexo new &lt;文章名&gt;来新建或者直接在工程目录下的source/_post目录下创建一个md文件即可，然后重新生成静态页面并启动服务器即可 12hexo new "文章名" # 此命令会在工程目录下的source/_post目录下生成一个&lt;文章名&gt;.md的文件hexo g &amp;&amp; hexo s # 此命令重新生成静态文件并启动服务器，此时即可通过浏览器访问到我们刚创建的博文了，修改该md文件即可修改博文内容 博文格式如下 1234---title: 博文的标题---博文内容 配置Hexo 安装hexo-theme-next主题（配置使用在后面统一说明） 1git clone https://github.com/theme-next/hexo-theme-next themes/next 安装看板娘hexo-helper-live2d 12345npm install hexo-helper-live2d --save# 下面的命令是安装live2d的模型，这里选择live2d-widget-model-haruto# 参考https://github.com/xiazeyu/live2d-widget-models选择自己需要的# 如果选择别的模型，在配置_config.yml文件里的live2d-&gt;model-&gt;use的值也要对应修改npm install live2d-widget-model-haruto --save 安装字数统计和阅读时间计算工具hexo-symbols-count-time 1npm install hexo-symbols-count-time --save 安装RSS工具 1npm install hexo-generator-feed --save 安装搜索工具 1npm install hexo-generator-searchdb --save 安装推送的git的工具 1npm install hexo-deployer-git --save 新建categories页 12345678hexo new page categories # 会在source目录下生成categories目录# 修改source/categories/index.md文件如下---title: categoriesdate: 2019-06-01 23:34:54type: "categories"comments: false--- 新建tags页 12345678hexo new page tags # 会在source目录下生成tags目录# 修改source/categories/index.md文件如下---title: 标签date: 2019-06-01 14:21:23type: "tags"comments: false--- 新建about页 1234567hexo new page about # 会在source目录下生成about目录# 修改source/categories/index.md文件如下---title: 我date: 2019-06-01 23:35:51comments: false--- 修改工程的配置修改_config.yml文件） 详细配置参考https://hexo.io/zh-cn/docs/configuration 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879# 以下是在原有配置项修改的title: 每天进步一点点subtitle: 代码千万行，注释第一行。编程不规范，同事两行泪。description: 就算有一天我一无所有，也不缺从头再来的勇气！author: Vimorlanguage: zh-CNtimezone: Asia/Shanghaitheme: next # 使用hexo-theme-next主题# 关联Github Pages，此处修改为自己的github仓库路径deploy: type: git repo: git@github.com:vimior/vimior.github.io.git branch: master##################完美的分割线############################# 以下是新增的# Live2D：看板娘的配置## https://github.com/EYHN/hexo-helper-live2dlive2d: enable: true scriptFrom: local # 默认 pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径) pluginJsPath: lib/ # 脚本文件相对与插件根目录路径 pluginModelPath: assets/ # 模型文件相对与插件根目录路径 # scriptFrom: jsdelivr # jsdelivr CDN # scriptFrom: unpkg # unpkg CDN # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中 debug: false # 调试, 是否在控制台输出日志 log: false model: use: live2d-widget-model-haruto # npm-module package name # use: hijiki # 博客根目录/live2d_models/ 下的目录名 # use: ./wives/hijiki # 相对于博客根目录的路径 # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-hijiki@1.0.5/assets/hijiki.model.json # 你的自定义 url scale: 1 hHeadPos: 0.5 vHeadPos: 0.618 display: superSample: 2 width: 125 height: 125 position: left hOffset: 30 vOffset: 20 mobile: show: true scale: 0.05 react: opacityDefault: 1 opacityOnHover: 0.2# symbols_count_time配置：用于计算字数，阅读时间symbols_count_time: symbols: true time: true total_symbols: true total_time: true exclude_codeblock: falsecreative_commons: by-nc-sa# 订阅配置feed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: ' '# 搜索配置search: path: search.xml field: post format: html limit: 10000 修改hexo-theme-next主题的配置（修改themes/next/_config.yml文件） 详细配置参考http://theme-next.iissnan.com/theme-settings.html 123456789101112131415161718192021222324252627282930313233343536373839rss: /atom.xmlfooter: since: 2019 icon: name: heart animated: true color: "#D0104C"menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archivemenu_settings: icons: true badges: truescheme: Geminiavatar: url: /images/avatar.png # 注意：需要把avatar.png放在themes/next/source/images里面 rounded: trueback2top: enable: true sidebar: true scrollpercent: truepost_meta： updated_at： another_day: falsesymbols_count_time: separated_meta: true item_text_post: true item_text_total: false awl: 4 wpm: 275android_chrome_color: "#fff"highlight_theme: night eightiesbusuanzi_count: enable: truelocal_search: enable: true 推送到Github Pages注意： 推送前先本地运行，通过浏览器访问没问题再行推送 初次使用git需要设置user name和email 12git config --global user.name "your name"git config --global user.email "your email" （如果未曾添加过ssh-agent）需要添加ssh-key到github的ssh-agent 12345# 1. 生成ssh密钥ssh-keygen -t rsa -C "your email" # 生成路径在%USERPROFILE%/.ssh目录# 2. 把%USERPROFILE%/.ssh/id_rsa的内容拷贝# 3. 粘贴到github ​ ​ ​ 生成静态文件 1hexo g 推送到github pages 12hexo deploy # 可以简写为 hexo d# hexo deploy -g 等于hexo g &amp;&amp; hexo d]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
</search>
